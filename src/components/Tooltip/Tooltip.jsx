import React, { Fragment, PureComponent } from 'react';import ReactDOM from 'react-dom';import { tooltipPositionCheck, tooltipPosition } from './TooltipPosition';import styles from './Tooltip.module.scss';type propTypes = {  /*Transmitter content*/  children: string | ReactNode,  /*Tooltip content*/  content: string | ReactNode,  position?: 'top' | 'right' | 'bottom' | 'left',};export default class Tooltip extends PureComponent<propTypes> {  static defaultProps = { position: 'top' };  constructor(props) {    super(props);    this.state = { active: false };    this.transmitter = React.createRef();  }  handleShow = () => this.setState({ active: true });  handleHide = () => setTimeout(() => {    this.setState({active: false});  }, 100);  renderTooltip = () => {    const { content, position } = this.props;    const { active } = this.state;    if (active) {      const checkPosition = tooltipPositionCheck(this.transmitter.current, position);      const addPositionStyle = tooltipPosition(this.transmitter.current, checkPosition);      return ReactDOM.createPortal(        <div className={styles.portalsTooltip} style={addPositionStyle}>          <div id="tooltip-content" className={styles[checkPosition]}>            <div className={styles.svgContent}>              <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 18.39 7.96" width="16" height="16">                <path d="M18.39,0,11.31,7.08a3,3,0,0,1-4.23,0L0,0Z" fill="#0c193a" />              </svg>            </div>            {content}          </div>        </div>,        document.getElementById('root'),      )    }    return null;  };  render() {    const { children, position } = this.props;    return (      <Fragment>        <span          position={position}          className={styles.manoolkitTooltip}          onMouseEnter={this.handleShow}          onMouseLeave={this.handleHide}          onFocus={this.handleShow}          onBlur={this.handleHide}          ref={this.transmitter}          role="button"          aria-describedby="tooltip-content"        >{children}</span>        {this.renderTooltip()}      </Fragment>    )  }}