import React, { Fragment, PureComponent } from 'react';import ReactDOM from 'react-dom';import styles from './Tooltip.module.scss';type propTypes = {  /*Transmitter content*/  children: string | ReactNode,  /*Tooltip content*/  content: string | ReactNode,  position?: 'top' | 'right' | 'bottom' | 'left',};export default class Tooltip extends PureComponent<propTypes> {  static defaultProps = { position: 'top' };  constructor(props) {    super(props);    this.state = { active: false };    this.transmitterRef = React.createRef();  }  handleShow = () => this.setState({ active: true });  handleHide = () => this.setState({ active: false });  renderTooltip = () => {    const { content } = this.props;    const { active } = this.state;    if (active) {      const { top, left, width, height } = this.transmitterRef.current.getBoundingClientRect();      const topStyle = {        bottom: document.body.clientHeight - top - window.scrollY + 12,        left: left + width / 2 + window.scrollX,      };      const leftStyle = {        bottom: document.body.clientHeight - top - window.scrollY - 20,        left: left - width - 90,      };      console.log(height);      return ReactDOM.createPortal(        <div className={styles.portalsTooltip} style={leftStyle}>          <span />          <div id="tooltip-content">            {content}          </div>        </div>,        document.getElementById('root'),      )    }    return null;  };  render() {    const { children, position } = this.props;    return (      <Fragment>        <span          position={position}          className={styles.manoolkitTooltip}          onMouseEnter={this.handleShow}          onMouseLeave={this.handleHide}          onFocus={this.handleShow}          onBlur={this.handleHide}          ref={this.transmitterRef}          role="button"          aria-describedby="tooltip-content"        >{children}</span>        { this.renderTooltip() }      </Fragment>    )  }}