import React, { Fragment, PureComponent } from 'react';import ReactDOM from 'react-dom';import { Transition } from 'react-transition-group';import styles from './Tooltip.module.scss';type propTypes = {  /*Transmitter content*/  children: string | ReactNode,  /*Tooltip content*/  content: string | ReactNode,  position?: 'top' | 'right' | 'bottom' | 'left',};export default class Tooltip extends PureComponent<propTypes> {  static defaultProps = { position: 'top' };  constructor(props) {    super(props);    this.state = { active: false };    this.transmitterRef = React.createRef();  }  handleShow = () => this.setState({ active: true });  handleHide = () => this.setState({ active: false });  renderTooltip = () => {    const { content, position } = this.props;    const { active } = this.state;    if (active) {      const { top, left, width, right, height } = this.transmitterRef.current.getBoundingClientRect();      const space = 12;      const lateralPositionWidth = 176;      const topStyle = {        bottom: document.body.clientHeight - top - window.scrollY + space,        left: left + width / 2 + window.scrollX,      };      const leftStyle = {        bottom: document.body.clientHeight - top - window.scrollY - space,        left: left - lateralPositionWidth,      };      const rightStyle = {        bottom: document.body.clientHeight - top - window.scrollY - space,        right: right - lateralPositionWidth,      };      const bottomStyle = {        bottom: document.body.clientHeight - top - window.scrollY - (height * 3),        left: left + width / 2 + window.scrollX,      };      const positionStyle = (position) => {        switch(position) {          case 'top': return topStyle;          case 'left': return leftStyle;          case 'right': return rightStyle;          case 'bottom': return bottomStyle;          default: return topStyle        }      };      return ReactDOM.createPortal(        <Transition in={active} timeout={1500}>          {(state) => {            console.log(state);            return(            <div className={`${styles.portalsTooltip} ${styles[state]} ${styles[position]}`} style={positionStyle(position)}>              <div id="tooltip-content">                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 18.39 7.96"  width="16" height="16">                  <path d="M18.39,0,11.31,7.08a3,3,0,0,1-4.23,0L0,0Z" fill="0c193a" />                </svg>                {content}              </div>            </div>          )          }}        </Transition>,        document.getElementById('root'),      )    }    return null;  };  render() {    const { children, position } = this.props;    return (      <Fragment>        <span          position={position}          className={styles.manoolkitTooltip}          onMouseEnter={this.handleShow}          onMouseLeave={this.handleHide}          onFocus={this.handleShow}          onBlur={this.handleHide}          ref={this.transmitterRef}          role="button"          aria-describedby="tooltip-content"        >{children}</span>        { this.renderTooltip() }      </Fragment>    )  }}